{
	"Pages Basic Component": {
		"prefix": "pages",
		"body": [
			"<template lang=\"pug\">",
			"  #handoverCategories.views.emsTheme(ref=\"view\")",
			"    .searchBlock(ref=\"searchBlock\")",
			"      div",
			"        el-form.complex-group(",
			"          :model=\"condition\"",
			"          @submit.native.prevent",
			"        )",
			"          el-form-item(label=\"狀態\")",
			"            el-select(",
			"              v-model=\"condition.isEnabled\"",
			"              @change=\"getListWithDebounce\"",
			"              clearable",
			"            )",
			"              el-option(:label=\"'啟用中'\" :value=\"true\") 啟用中",
			"              el-option(:label=\"'已停用'\" :value=\"false\") 已停用",
			"          el-form-item.searchBox(label=\"名稱\")",
			"            el-input(",
			"              v-model=\"condition.name\"",
			"              placeholder=\"輸入輸入名稱\"",
			"              maxlength=\"10\"",
			"              @keyup.native.enter=\"getListWithDebounce\"",
			"              clearable",
			"              @clear=\"getListWithDebounce\"",
			"            )",
			"              el-button(",
			"                slot=\"append\"",
			"                icon=\"el-icon-search\"",
			"                @click=\"getListWithDebounce\"",
			"              ) 搜尋",
			"        .btnWrap",
			"          el-button(",
			"            class=\"newItem\"",
			"            type=\"add\"",
			"            icon=\"el-icon-plus\"",
			"            @click=\"handlePanel({ action:'create' })\"",
			"          ) 新增",
			"    .tableSection",
			"      TableWrapper(",
			"        :tableHeight=\"tableHeight\"",
			"        :tableData=\"tbData.list\"",
			"        :totalSize=\"tbData.totalSize\"",
			"        :pagination=\"pagination\"",
			"        :columnSetting=\"columnSetting\"",
			"        :listLoading=\"listLoading\"",
			"        :isSortable=\"true\"",
			"        :currentSort=\"getSorter\"",
			"        :disableDeletion=\"true\"",
			"        @pageSizeChange=\"pageSizeChange\"",
			"        @pageChange=\"pageChange\"",
			"        @sortChange=\"sortChange\"",
			"        @sequenceChange=\"sequenceChange\"",
			"      )",
			"</template>",
			"<script>",
			"import apiHandoverTypes from '@api/apiHandoverTypes'",
    "import columnModule from '@js/tableProp'",
    "import { cloneDeep } from 'lodash'",
    "import TableWrapper from '@c/TableWrapper'",
    "import { CommonMixin } from '@/mixins'",
    "",
    "export default {",
    "  name: 'HandoverTypes',",
    "  components: {",
    "    TableWrapper,",
    "  },",
    "  mixins: [CommonMixin],",
    "  data() {",
    "    return {",
    "      tableHeight: 0,",
    "      condition: {",
    "        name: null,",
    "        sortName: 'sequence',",
    "        sort: 'ASC',",
    "        isEnabled: true,",
    "      },",
    "      tbData: {},",
    "      columnSetting: [",
    "        columnModule.sequence(),",
    "        columnModule.name(null, true),",
    "        columnModule.isEnabled(100),",
    "        columnModule.riskLevel(),",
    "        columnModule.updatedOn(170),",
    "        columnModule.updatedByName(100, false),",
    "      ],",
    "      pagination: {",
    "        pageNum: 1,",
    "        pageSize: 10,",
    "      },",
    "      listLoading: false,",
    "    }",
    "  },",
    "  computed: {",
    "    getPayLoad() {",
    "      const load = {",
    "        page: this.pagination.pageNum,",
    "        pageSize: this.pagination.pageSize,",
    "      }",
    "      Object.keys(this.condition).forEach(key =&gt; {",
    "        const value = this.condition[key]",
    "        load[key] = value",
    "      })",
    "      return load",
    "    },",
    "  },",
    "  created() {",
    "    this.getList()",
    "    this.$bus.$on('resize-table-height', this.setTableHeight)",
    "  },",
    "  mounted() {",
    "    this.setTableHeight()",
    "  },",
    "  activated() {",
    "    this.setTableHeight()",
    "  },",
    "  beforeDestroy() {",
    "    this.$store.dispatch('JsPanels/closePanelByParent', this.$options.name)",
    "    this.$bus.$off('resize-table-height')",
    "  },",
    "  methods: {",
    "    async getList() {",
    "      try {",
    "        this.listLoading = true",
    "        const res = await apiHandoverTypes.getHandoverTypesList(this.getPayLoad)",
    "        this.tbData = res",
    "      } catch {",
    "        // pass",
    "      } finally {",
    "        this.listLoading = false",
    "      }",
    "    },",
    "    async sequenceChange({ oldIndex, newIndex }) {",
    "      // 先複製params需要的列表資料",
    "      const paramsList = cloneDeep(this.tbData.list)",
    "      // 先複製params需要的列表資料",
    "      const arr = cloneDeep(this.tbData.list)",
    "      const targetRow = arr.splice(oldIndex, 1)[0]",
    "      arr.splice(newIndex, 0, targetRow)",
    "",
    "      this.tbData.list = arr",
    "",
    "      // 舊物件",
    "      const oldObject = paramsList[oldIndex]",
    "      // 新物件",
    "      const newsObject = paramsList[newIndex]",
    "      // 移動物件的id",
    "      const id = oldObject.id",
    "      // 更改的排序參數",
    "      const sequence = (newsObject.sequence === 0) ? oldObject.sequence : newsObject.sequence",
    "      const params = {",
    "        'sequence': sequence,",
    "      }",
    "      try {",
    "        await apiHandoverTypes.updateHandoverTypesSequence(params, id)",
    "        this.getListWithDebounce()",
    "      } catch {",
    "        // pass",
    "      }",
    "    },",
    "    handlePanel({ action, index = null }) {",
    "      if (action !== 'delete') {",
    "        const titleProp = {",
    "          action,",
    "          page: '交接類別',",
    "        }",
    "        if (index !== null) {",
    "          titleProp.title = this.tbData.list[index].name",
    "          titleProp.id = this.tbData.list[index].id",
    "        }",
    "        const headerTitle = this.getHeaderTitle(titleProp)",
    "",
    "        const settings = {",
    "          component: 'EditHandoverTypes',",
    "          headerTitle,",
    "          contentSize: 'L',",
    "          bgPanel: '#05517c',",
    "        }",
    "        const props = {",
    "          action,",
    "          parent: this.$options.name,",
    "        }",
    "        let id = 'only'",
    "        if (index !== null) {",
    "          id = this.tbData.list[index].id",
    "          props.id = id",
    "        } else {",
    "          props.position = this.condition.position",
    "        }",
    "        settings.id = id",
    "",
    "        const events = {",
    "          refreshPage: () =&gt; {",
    "            this.getListWithDebounce(action)",
    "          },",
    "        }",
    "",
    "        this.$store.dispatch('JsPanels/addPanel', { settings, props, events })",
    "      } else {",
    "        const id = this.tbData.list[index].id",
    "        const deleteApi = apiHandoverTypes.deleteHandoverTypes",
    "        this.delete(id, deleteApi)",
    "      }",
    "    },",
    "  },",
    "}",
			"</script>"
		],
		"description": "pages_basic_component"
	},
	"Panel Basic Component": {
		"prefix": "panel",
		"body": [
			"<template lang=\"pug\">",
			"  .panelContent",
			"    .contentWrapper",
			"      el-form.contentInner",
			"        el-form-item(label=\"位置\")",
			"          el-select(v-model=\"formData.position\" clearable)",
			"            el-option(:label=\"'首頁'\" :value=\"0\") 首頁",
			"            el-option(:label=\"'搜尋頁'\" :value=\"1\") 搜尋頁",
			"        el-form-item(label=\"排序\")",
			"          el-input(v-model=\"formData.sequence\")",
			"        el-form-item(label=\"連結方式\")",
			"          el-radio-group(v-model=\"formData.openType\")",
			"            el-radio(:label=\"1\") 本頁連結",
			"            el-radio(:label=\"2\") 另開視窗",
			"            el-radio(:label=\"0\") 無",
			"        el-form-item(label=\"連結網址\")",
			"          el-input(v-model=\"formData.link\")",
			"        el-form-item(label=\"上架日期\")",
			"          el-date-picker(",
			"            v-model=\"formData.publishedOn\"",
			"            type=\"date\"",
			"            format=\"yyyy-MM-dd\"",
			"            placeholder=\"選擇上架日期\"",
			"          )",
			"        el-form-item(label=\"下架日期\")",
			"          el-date-picker(",
			"            v-model=\"formData.finishedOn\"",
			"            type=\"date\"",
			"            format=\"yyyy-MM-dd\"",
			"            placeholder=\"選擇下架日期\"",
			"          )",
			"        el-form-item(label=\"狀態\")",
			"          el-switch(",
			"            v-model=\"formData.isEnabled\"",
			"            active-text=\"啟用\"",
			"            inactive-text=\"停用\"",
			"          )",
			"        el-form-item(label=\"輪播標題\")",
			"          el-input(v-model=\"formData.title\")",
			"        el-form-item(label=\"圖片管理\")",
			"          ImgUploader(",
			"            :FileSetKey=\"getFileSetKey\"",
			"            :limitedSize=\"limitedSize\"",
			"            :uploaderTitle=\"uploaderTitle\"",
			"            @setImageFile=\"setImageFile\"",
			"          )",
			"    .buttonWrapper",
			"      el-button(",
			"        type=\"danger\"",
			"        @click=\"closePanel\"",
			"      ) 取消",
			"      el-button(",
			"        v-if=\"action !== 'view'\"",
			"        type=\"success\"",
			"        @click=\"triggerDebounce\"",
			"      ) 儲存",
			"</template>",
			"<script>",
			"import apiXXX from '@api/apiXXX'",
			"import debounce from 'lodash/debounce'",
			"import ImgUploader from './subComponents/ImgUploader'",
			"",
			"export default {",
			"  name: 'EditXXX',",
			"  data() {",
			"    return {",
			"      formData: {",
			"        position: null,",
			"        sequence: null,",
			"        title: null,",
			"        link: null,",
			"        openType: 1,",
			"        isEnabled: true,",
			"        publishedOn: null,",
			"        finishedOn: null,",
			"        imageFileSet: {",
			"          pcPath: null,",
			"          mbPath: null,",
			"        },",
			"      },",
			"      uploaderTitle: [",
			"        'PCXXX(單檔上傳)',",
			"        '手機XXX(單檔上傳)',",
			"      ],",
			"      limitedSize: {",
			"        width: 1920,",
			"        height: 425,",
			"      },",
			"    }",
			"  },",
			"  props: {",
			"    id: {",
			"      type: Number,",
			"      default: null,",
			"    },",
			"    action: {",
			"      type: String,",
			"      default: null,",
			"    },",
			"  },",
			"  components: {",
			"    ImgUploader,",
			"  },",
			"  computed: {",
			"    getFileSetKey() {",
			"      return Object.keys(this.formData.imageFileSet)",
			"    },",
			"  },",
			"  mounted() {",
			"    if (this.id) {",
			"      // this.getRowData()",
			"    }",
			"  },",
			"  methods: {",
			"    async getRowData() {",
			"      try {",
			"        const res = await apiXXX.getXXX(this.id)",
			"        this.formData = res",
			"      } catch {",
			"        // pass",
			"      }",
			"    },",
			"    triggerDebounce() {",
			"      const vm = this",
			"      // if (this.action === 'create') {",
			"      //   this.createXXX(vm)",
			"      // } else {",
			"      //   this.updateRowData(vm)",
			"      // }",
			"    },",
			"    updateRowData: debounce(async vm => {",
			"      try {",
			"        await apiXXX.updateXXX(vm.formData, vm.id)",
			"      } catch {",
			"        // pass",
			"      }",
			"    }, 600),",
			"    createXXX: debounce(async vm => {",
			"      try {",
			"        await apiXXX.addXXX(vm.formData)",
			"      } catch {",
			"        // pass",
			"      }",
			"    }, 600),",
			"    setImageFile(data) {",
			"      this.formData.imageFileSet[data.key] = data.path",
			"    },",
			"    closePanel() {",
			"      this.$$parent.$$emit('close')",
			"    },",
			"  },",
			"}",
			"</script>",
			"<style lang=\"sass\" scoped>",
			"::v-deep.el-form-item",
			"  display: flex",
			"  .el-form-item__label",
			"    width: 100px",
			"    text-align: start",
			"  .el-form-item__content",
			"    padding-right: 1rem",
			"    flex: 1",
			"</style>",
			""
		],
		"description": "panel"
	},
	"Api Basic Snippet": {
		"prefix": "api",
		"body": [
			"import { assemblyParams } from '@/utils'",
			"import http from './http'",
			"",
			"export default {",
			"  // 新增",
			"  add(data) {",
			"    return http({",
			"      url: '/',",
			"      method: 'post',",
			"      data,",
			"    })",
			"  },",
			"  // 取得列表",
			"  getList(params) {",
			"    const urlQuery = assemblyParams(params)",
			"    return http({",
			"      url: `//${ urlQuery}`,",
			"      method: 'get',",
			"    })",
			"  },",
			"  // 取得單筆資料",
			"  get(id) {",
			"    return http({",
			"      url: `//${ id}`,",
			"      method: 'get',",
			"    })",
			"  },",
			"  // 更新資料",
			"  update(data, id) {",
			"    return http({",
			"      url: `//${ id}`,",
			"      method: 'patch',",
			"      data,",
			"    })",
			"  },",
			"  // 更新排序",
			"  updateSort(sequence, id) {",
			"    return http({",
			"      url: `//${ id}`,",
			"      method: 'put',",
			"      sequence,",
			"    })",
			"  },",
			"  // 刪除",
			"  async delete(id) {",
			"    return http({",
			"      url: `//${ id}`,",
			"      method: 'delete',",
			"    })",
			"  },",
			"}",
			""
		],
		"description": "api"
	}
}